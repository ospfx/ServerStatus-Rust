name: Release

on:
  push:
    tags:
      - "v*"

  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  macos:
    runs-on: macos-latest
    name: macos (${{ matrix.platform.target }})
    permissions:
      contents: write
    strategy:
      fail-fast: true
      matrix:
        platform:
          - target: "aarch64-apple-darwin"
          - target: "x86_64-apple-darwin"
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: 3.11
      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform.target }}

      - name: Build python wheels - server
        uses: PyO3/maturin-action@v1
        with:
          working-directory: server
          target: ${{ matrix.platform.target }}
          args: --release --strip
          sccache: "true"
      - name: Build python wheels - client
        uses: PyO3/maturin-action@v1
        with:
          working-directory: client
          target: ${{ matrix.platform.target }}
          args: --release --strip
          sccache: "true"

      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-macos-${{ matrix.platform.target }}
          path: target/wheels/stat*.whl
          if-no-files-found: error

      - name: Strip
        continue-on-error: true
        run: |
          strip target/${{ matrix.platform.target }}/release/stat_server
          strip target/${{ matrix.platform.target }}/release/stat_client
          cp config.toml target/${{ matrix.platform.target }}/release/
          cp systemd/stat_server.service target/${{ matrix.platform.target }}/release/
          cp systemd/stat_client.service target/${{ matrix.platform.target }}/release/

      - name: Compress binaries
        # Upx may not support some platforms. Ignore the errors
        continue-on-error: true
        # Disable upx for mips. See https://github.com/upx/upx/issues/387
        if: true && !contains(matrix.platform.target, 'mips')
        uses: svenstaro/upx-action@v2
        with:
          strip: false
          args: -q --best --lzma
          files: |
            target/${{ matrix.platform.target }}/release/stat_server
            target/${{ matrix.platform.target }}/release/stat_client

      - uses: actions/upload-artifact@v4
        with:
          name: ServerStatusRust-${{ matrix.platform.target }}
          path: |
            target/${{ matrix.platform.target }}/release/stat_server
            target/${{ matrix.platform.target }}/release/stat_client
            target/${{ matrix.platform.target }}/release/config.toml
            target/${{ matrix.platform.target }}/release/stat_server.service
            target/${{ matrix.platform.target }}/release/stat_client.service

      - name: Zip Release - Server
        uses: TheDoctor0/zip-release@0.7.6
        with:
          type: zip
          filename: server-${{ matrix.platform.target }}.zip
          directory: target/${{ matrix.platform.target }}/release/
          path: |
            stat_server
            config.toml

      - name: Zip Release - Client
        uses: TheDoctor0/zip-release@0.7.6
        with:
          type: zip
          filename: client-${{ matrix.platform.target }}.zip
          directory: target/${{ matrix.platform.target }}/release/
          path: |
            stat_client

      - name: Upload binaries to GitHub Release
        uses: softprops/action-gh-release@v2
        if: startsWith(github.ref, 'refs/tags/')
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          files: |
            target/${{ matrix.platform.target }}/release/server-${{ matrix.platform.target }}.zip
            target/${{ matrix.platform.target }}/release/client-${{ matrix.platform.target }}.zip
          generate_release_notes: true
          draft: true

  linux: # (x86_64, aarch64) x (pypi, deb, rpm)
    runs-on: ubuntu-latest
    name: linux (${{ matrix.platform.target }})
    permissions:
      contents: write
    strategy:
      fail-fast: true
      matrix:
        platform:
          - target: "x86_64-unknown-linux-musl"
            cargo-flags: "--no-default-features --features stat_client/native"
            client-flags: "--no-default-features --features native"
            server-flags: ""
          - target: "aarch64-unknown-linux-musl"
            cargo-flags: "--no-default-features --features stat_client/native"
            client-flags: "--no-default-features --features native"
            server-flags: ""

    container:
      image: docker://ghcr.io/rust-cross/rust-musl-cross:${{ matrix.platform.target }}
    steps:
      - uses: actions/checkout@v4
      - name: Clean Rust cache #解决工具链安装失败问题
        run: |
          rm -rf /root/.cargo/registry
          rm -rf /root/.cargo/git
          rm -rf /root/.rustup
      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform.target }}

      - name: Install packages
        run: |
          pip install cargo-generate-rpm cargo-deb
          sudo apt-get update -y -qq
          sudo apt-get install zip git -y -qq
          echo $PWD
          git config --global --add safe.directory $PWD
          git rev-parse --short HEAD

      # wheels
      - name: Build python wheels - server
        uses: PyO3/maturin-action@v1
        with:
          container: off
          manylinux: auto
          working-directory: server
          target: ${{ matrix.platform.target }}
          args: --release --strip ${{matrix.platform.server-flags}}
          sccache: "true"

      - name: Build python wheels - client
        uses: PyO3/maturin-action@v1
        with:
          container: off
          manylinux: auto
          working-directory: client
          target: ${{ matrix.platform.target }}
          args: --release --strip ${{matrix.platform.client-flags}}
          sccache: "true"

      - name: Build Debian package
        run: |
          cargo deb -p stat_server --target=${{ matrix.platform.target }} --no-build --no-strip
          cargo deb -p stat_client --target=${{ matrix.platform.target }} --no-build --no-strip

      - name: Build RPM package
        run: |
          cargo generate-rpm -p server --target=${{ matrix.platform.target }}
          cargo generate-rpm -p client --target=${{ matrix.platform.target }}

      - name: Upload wheels
        uses: actions/upload-artifact@v4
        with:
          name: wheels-linux-${{ matrix.platform.target }}
          path: target/wheels/stat*.whl
          if-no-files-found: error
      - name: Upload deb artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform.target }}-deb
          path: target/${{ matrix.platform.target }}/debian/stat*.deb
          if-no-files-found: error
      - name: Upload RPM artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform.target }}-rpm
          path: target/${{ matrix.platform.target }}/generate-rpm/stat*.rpm
          if-no-files-found: error

      - name: LLVM Strip (Linux)
        continue-on-error: true
        run: |
          sudo apt-get install -y llvm
          llvm-strip target/${{ matrix.platform.target }}/release/stat_server
          llvm-strip target/${{ matrix.platform.target }}/release/stat_client
          cp config.toml target/${{ matrix.platform.target }}/release/
          cp systemd/stat_server.service target/${{ matrix.platform.target }}/release/
          cp systemd/stat_client.service target/${{ matrix.platform.target }}/release/

      - name: Compress binaries
        # Upx may not support some platforms. Ignore the errors
        continue-on-error: true
        # Disable upx for mips. See https://github.com/upx/upx/issues/387
        if: true && !contains(matrix.platform.target, 'mips')
        uses: svenstaro/upx-action@v2
        with:
          strip: false
          args: -q --best --lzma
          files: |
            target/${{ matrix.platform.target }}/release/stat_server
            target/${{ matrix.platform.target }}/release/stat_client

      - uses: actions/upload-artifact@v4
        with:
          name: ServerStatusRust-${{ matrix.platform.target }}
          path: |
            target/${{ matrix.platform.target }}/release/stat_server
            target/${{ matrix.platform.target }}/release/stat_client
            target/${{ matrix.platform.target }}/release/config.toml
            target/${{ matrix.platform.target }}/release/stat_server.service
            target/${{ matrix.platform.target }}/release/stat_client.service

      - name: Zip Release - Server
        uses: TheDoctor0/zip-release@0.7.6
        with:
          type: zip
          filename: server-${{ matrix.platform.target }}.zip
          directory: target/${{ matrix.platform.target }}/release/
          path: |
            stat_server
            stat_server.service
            config.toml

      - name: Zip Release - Client
        uses: TheDoctor0/zip-release@0.7.6
        with:
          type: zip
          filename: client-${{ matrix.platform.target }}.zip
          directory: target/${{ matrix.platform.target }}/release/
          path: |
            stat_client
            stat_client.service

      - name: Upload binaries to GitHub Release
        uses: softprops/action-gh-release@v2
        if: startsWith(github.ref, 'refs/tags/')
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          files: |
            target/${{ matrix.platform.target }}/release/server-${{ matrix.platform.target }}.zip
            target/${{ matrix.platform.target }}/release/client-${{ matrix.platform.target }}.zip
            target/${{ matrix.platform.target }}/debian/stat*.deb
            target/${{ matrix.platform.target }}/generate-rpm/stat*.rpm
          generate_release_notes: true
          draft: true

  windows-or-linux-others:
    name: Cross build for ${{ matrix.platform.target }}
    runs-on: ${{ matrix.platform.os }}
    permissions:
      contents: write
    strategy:
      matrix:
        platform:
          - os: ubuntu-latest
            target: aarch64-linux-android
            suffix: ""
            use-cross: true
            cargo-flags: ""
          # 32bit
          - os: ubuntu-latest
            target: armv7-linux-androideabi
            suffix: ""
            use-cross: true
            cargo-flags: ""

          - os: ubuntu-latest
            target: armv7-unknown-linux-musleabihf
            suffix: ""
            use-cross: true
            cargo-flags: ""
            setup-cc: true
            cc: arm-linux-musleabihf-gcc
            cxx: arm-linux-musleabihf-g++
            extra-args: "--no-default-features --features stat_client/native"

          - os: windows-latest
            target: x86_64-pc-windows-msvc
            suffix: .exe
            use-cross: false
            cargo-flags: ""
          # - os: windows-latest
          #   target: x86_64-pc-windows-gnu
          #   suffix: .exe
          #   use-cross: false
          #   cargo-flags: ""

    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
        with:
          override: true
          profile: minimal
          toolchain: stable
          target: ${{ matrix.platform.target }}

      - name: Install Protoc
        if: matrix.platform.os == 'windows-latest'
        uses: arduino/setup-protoc@v1
        with:
          version: "3.x"
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install Android NDK
        if: contains(matrix.platform.target, 'android')
        uses: nttld/setup-ndk@v1
        with:
          ndk-version: r25c
          add-to-path: true

      - name: Set Android NDK environment variables
        if: contains(matrix.platform.target, 'android')
        run: |
          echo "ANDROID_NDK_HOME=${{ steps.setup-ndk.outputs.ndk-path }}" >> $GITHUB_ENV
          echo "${{ steps.setup-ndk.outputs.ndk-path }}/toolchains/llvm/prebuilt/linux-x86_64/bin" >> $GITHUB_PATH

      # https://blog.rust-lang.org/2023/01/09/android-ndk-update-r25.html
      # https://github.com/cross-rs/cross/issues/1222
      - name: Update Cross
        uses: actions-rs/cargo@v1
        with:
          command: install
          use-cross: false
          args: cross --git https://github.com/cross-rs/cross

      - name: Install bindgen dependencies
        if: contains(matrix.platform.target, 'android')  # 仅针对 Android 目标
        run: |
          sudo apt-get update
          sudo apt-get install -y clang libclang-dev  # 安装 libclang，供 bindgen 使用

      # 针对armv7-unknown-linux-musleabihf的特定步骤
      - name: Install armv7-musleabihf toolchain and dependencies
        if: matrix.platform.target == 'armv7-unknown-linux-musleabihf'
        run: |
          # 安装基础依赖
          sudo apt-get update
          sudo apt-get install -y \
            musl-tools \
            cmake \
            clang \
            libclang-dev \
            ca-certificates \
            gnupg2
          
          # 添加Ubuntu Bionic ports仓库并导入GPG密钥
          echo "deb http://ports.ubuntu.com/ubuntu-ports bionic universe" | sudo tee /etc/apt/sources.list.d/arm-musleabihf.list
          
          # 导入Ubuntu Bionic的GPG密钥
          sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 3B4FE6ACC0B21F32
          
          # 更新并安装预编译的musleabihf交叉编译工具链
          sudo apt-get update -o Acquire::AllowInsecureRepositories=true
          sudo apt-get install -y -o APT::AllowUnauthenticated=true \
            gcc-arm-linux-musleabihf \
            g++-arm-linux-musleabihf \
            binutils-arm-linux-musleabihf \
            libc6-armhf-cross \
            libc6-dev-armhf-cross \
            libc6-dev-arm-linux-musleabihf-cross
          
          # 安装bindgen-cli
          cargo install --force --locked bindgen-cli
      
      # 针对armv7-unknown-linux-musleabihf设置编译器
      - name: Set compiler for armv7-musleabihf
        if: matrix.platform.target == 'armv7-unknown-linux-musleabihf'
        run: |
          # 设置交叉编译工具链环境变量
          echo "CC_armv7_unknown_linux_musleabihf=arm-linux-musleabihf-gcc" >> $GITHUB_ENV
          echo "CXX_armv7_unknown_linux_musleabihf=arm-linux-musleabihf-g++" >> $GITHUB_ENV
          echo "AR_armv7_unknown_linux_musleabihf=arm-linux-musleabihf-ar" >> $GITHUB_ENV
          echo "RANLIB_armv7_unknown_linux_musleabihf=arm-linux-musleabihf-ranlib" >> $GITHUB_ENV
          echo "LD_armv7_unknown_linux_musleabihf=arm-linux-musleabihf-ld" >> $GITHUB_ENV
          
          # 设置Cargo配置文件
          mkdir -p .cargo
          cat > .cargo/config << 'EOF'
          [target.armv7-unknown-linux-musleabihf]
          linker = "arm-linux-musleabihf-gcc"
          ar = "arm-linux-musleabihf-ar"
          rustflags = [
            "-C", "link-arg=--sysroot=/usr/arm-linux-musleabihf",
            "-C", "link-arg=-Wl,-rpath-link,/usr/arm-linux-musleabihf/lib",
            "-C", "target-cpu=cortex-a7",
            "-C", "linker=arm-linux-musleabihf-gcc"
          ]
          EOF
      
      - name: Build release
        uses: actions-rs/cargo@v1
        env:
          # 启用 bindgen 所需的 clang 路径（Android NDK 中的 clang）
          CC_aarch64_linux_android: aarch64-linux-android21-clang  # 适配 Android API 21+
          CXX_aarch64_linux_android: aarch64-linux-android21-clang++
          # 告诉 bindgen 目标平台的系统头文件路径（Android NDK 提供）
          BINDGEN_EXTRA_CLANG_ARGS_aarch64_linux_android: >
            --sysroot=${{ env.ANDROID_NDK_HOME }}/toolchains/llvm/prebuilt/linux-x86_64/sysroot
          # 针对armv7-unknown-linux-musleabihf的bindgen参数
          BINDGEN_EXTRA_CLANG_ARGS_armv7_unknown_linux_musleabihf: >
            --sysroot=/usr/arm-linux-musleabihf
            -target armv7-unknown-linux-musleabihf
            -march=armv7-a
            -mfpu=vfpv3-d16
            -mfloat-abi=hard
            -I/usr/arm-linux-musleabihf/include
          # 针对aws-lc-rs的特定配置
          AWS_LC_RS_SYSROOT: /usr/arm-linux-musleabihf
          AWS_LC_RS_TARGET: armv7-unknown-linux-musleabihf
          
        with:
          command: build
          use-cross: ${{ matrix.platform.use-cross }}
          args: --locked --release --target=${{ matrix.platform.target }} ${{ matrix.platform.cargo-flags }} ${{ matrix.platform.extra-args }}
          
          
      - name: Strip (MacOS/Window)
        if: matrix.platform.os != 'ubuntu-latest'
        continue-on-error: true
        run: |
          strip target/${{ matrix.platform.target }}/release/stat_server${{matrix.platform.suffix}}
          strip target/${{ matrix.platform.target }}/release/stat_client${{matrix.platform.suffix}}
          cp config.toml target/${{ matrix.platform.target }}/release/
          cp systemd/stat_server.service target/${{ matrix.platform.target }}/release/
          cp systemd/stat_client.service target/${{ matrix.platform.target }}/release/

      - name: LLVM Strip (Linux)
        if: matrix.platform.os == 'ubuntu-latest'
        continue-on-error: true
        run: |
          sudo apt-get install -y llvm
          llvm-strip target/${{ matrix.platform.target }}/release/stat_server${{matrix.platform.suffix}}
          llvm-strip target/${{ matrix.platform.target }}/release/stat_client${{matrix.platform.suffix}}
          cp config.toml target/${{ matrix.platform.target }}/release/
          cp systemd/stat_server.service target/${{ matrix.platform.target }}/release/
          cp systemd/stat_client.service target/${{ matrix.platform.target }}/release/

      - name: Compress binaries
        # Upx may not support some platforms. Ignore the errors
        continue-on-error: true
        # Disable upx for mips. See https://github.com/upx/upx/issues/387
        if: true && !contains(matrix.platform.target, 'mips')
        uses: svenstaro/upx-action@v2
        with:
          strip: false
          args: -q --best --lzma
          files: |
            target/${{ matrix.platform.target }}/release/stat_server${{matrix.platform.suffix}}
            target/${{ matrix.platform.target }}/release/stat_client${{matrix.platform.suffix}}

      - uses: actions/upload-artifact@v4
        with:
          name: ServerStatusRust-${{ matrix.platform.target }}
          path: |
            target/${{ matrix.platform.target }}/release/stat_server${{matrix.platform.suffix}}
            target/${{ matrix.platform.target }}/release/stat_client${{matrix.platform.suffix}}
            target/${{ matrix.platform.target }}/release/config.toml
            target/${{ matrix.platform.target }}/release/stat_server.service
            target/${{ matrix.platform.target }}/release/stat_client.service

      - name: Zip Release - Server (Linux)
        if: matrix.platform.os == 'ubuntu-latest' && contains(matrix.platform.target, 'linux')
        uses: TheDoctor0/zip-release@0.7.6
        with:
          type: zip
          filename: server-${{ matrix.platform.target }}.zip
          directory: target/${{ matrix.platform.target }}/release/
          path: |
            stat_server${{matrix.platform.suffix}}
            stat_server.service
            config.toml

      - name: Zip Release - Client (Linux)
        if: matrix.platform.os == 'ubuntu-latest' && contains(matrix.platform.target, 'linux')
        uses: TheDoctor0/zip-release@0.7.6
        with:
          type: zip
          filename: client-${{ matrix.platform.target }}.zip
          directory: target/${{ matrix.platform.target }}/release/
          path: |
            stat_client${{matrix.platform.suffix}}
            stat_client.service

      - name: Zip Release - Server (MacOS/Window)
        if: true && !contains(matrix.platform.target, 'linux')
        uses: TheDoctor0/zip-release@0.7.6
        with:
          type: zip
          filename: server-${{ matrix.platform.target }}.zip
          directory: target/${{ matrix.platform.target }}/release/
          path: |
            stat_server${{matrix.platform.suffix}}
            config.toml

      - name: Zip Release - Client (MacOS/Window)
        if: true && !contains(matrix.platform.target, 'linux')
        uses: TheDoctor0/zip-release@0.7.6
        with:
          type: zip
          filename: client-${{ matrix.platform.target }}.zip
          directory: target/${{ matrix.platform.target }}/release/
          path: |
            stat_client${{matrix.platform.suffix}}

      - name: Upload binaries to GitHub Release
        uses: softprops/action-gh-release@v2
        if: startsWith(github.ref, 'refs/tags/')
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          files: |
            target/${{ matrix.platform.target }}/release/server-${{ matrix.platform.target }}.zip
            target/${{ matrix.platform.target }}/release/client-${{ matrix.platform.target }}.zip
          generate_release_notes: true
          draft: true

  release:
    name: PyPI Release
    runs-on: ubuntu-latest
    environment:
      name: PyPI
      url: https://pypi.org/project/ServerStatus-Rust/
    if: startsWith(github.ref, 'refs/tags/')
    needs: [linux, macos]
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: wheels
      - uses: actions/setup-python@v4
        with:
          python-version: 3.11
      - name: Publish to PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
        run: |
          pip install --upgrade twine
          twine upload --skip-existing *
